{"version":3,"sources":["components/Crop.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Crop","props","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","src","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","state","unit","width","aspect","this","height","getCroppedImg","croppedImageUrl","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","console","error","className","type","accept","onChange","ruleOfThirds","onComplete","alt","style","maxWidth","Component","App","logo","href","rel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"oWAoHeA,G,wDA9GX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAaVC,aAAe,SAAAC,GACX,GAAIA,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAMC,OAAS,EAAG,CAC7C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,kBAC9B,EAAKC,SAAS,CAAEC,IAAKJ,EAAOK,YAE9BL,EAAOM,cAAcV,EAAEC,OAAOC,MAAM,MApB1B,EAwBlBS,cAAgB,SAAAC,GACZ,EAAKC,SAAWD,GAzBF,EA4BhBE,eAAiB,SAAAC,GACf,EAAKC,eAAeD,IA7BN,EAgChBE,aAAe,SAACF,EAAMG,GAGpB,EAAKX,SAAS,CAAEQ,UAjChB,EAAKI,MAAQ,CACTX,IAAK,KACLO,KAAM,CACFK,KAAM,IACNC,MAAO,GACPC,OAAQ,IAPF,E,oGAsCKP,G,4EACfQ,KAAKV,UAAYE,EAAKM,OAASN,EAAKS,Q,gCACRD,KAAKE,cACjCF,KAAKV,SACLE,EACA,gB,OAHIW,E,OAKNH,KAAKhB,SAAS,CAAEmB,oB,2IAINd,EAAOG,EAAMY,GAAW,IAAD,OAC7BC,EAASC,SAASC,cAAc,UAChCC,EAASnB,EAAMoB,aAAepB,EAAMS,MACpCY,EAASrB,EAAMsB,cAAgBtB,EAAMY,OAiB3C,OAhBAI,EAAOP,MAAQN,EAAKM,MACpBO,EAAOJ,OAAST,EAAKS,OACTI,EAAOO,WAAW,MAE1BC,UACFxB,EACAG,EAAKsB,EAAIN,EACThB,EAAKuB,EAAIL,EACTlB,EAAKM,MAAQU,EACbhB,EAAKS,OAASS,EACd,EACA,EACAlB,EAAKM,MACLN,EAAKS,QAGA,IAAIe,SAAQ,SAACC,EAASC,GAC3Bb,EAAOc,QAAO,SAAAC,GACPA,GAKLA,EAAKC,KAAOjB,EACZkB,OAAOC,IAAIC,gBAAgB,EAAKC,SAChC,EAAKA,QAAUH,OAAOC,IAAIG,gBAAgBN,GAC1CH,EAAQ,EAAKQ,UANXE,QAAQC,MAAM,qBAOf,mB,+BAKE,IAAD,EACoC5B,KAAKJ,MAApCJ,EADL,EACKA,KAAMW,EADX,EACWA,gBAAiBlB,EAD5B,EAC4BA,IAChC,OACE,yBAAK4C,UAAU,OACX,6BACI,2BAAOC,KAAK,OAAOC,OAAO,UAAUC,SAAUhC,KAAKxB,gBAEtDS,GACQ,kBAAC,IAAD,CACCA,IAAKA,EACLO,KAAMA,EACNyC,cAAY,EACZ7C,cAAeY,KAAKZ,cACpB8C,WAAYlC,KAAKT,eACjByC,SAAUhC,KAAKN,eAGxBS,GACG,yBAAKgC,IAAI,OAAOC,MAAO,CAAEC,SAAU,QAAUpD,IAAKkB,S,GAzGnDmC,cC0BJC,MAzBf,WACE,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK5C,IAAKuD,IAAMX,UAAU,WAAWM,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEN,UAAU,WACVY,KAAK,sBACL/D,OAAO,SACPgE,IAAI,uBAJN,gBAUF,6BACE,kBAAC,EAAD,SCZYC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAAS4C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLD,QAAQC,MAAMA,EAAM8B,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.b48bfc51.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass Crop extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            src: null,\n            crop: {\n                unit: \"%\",\n                width: 30,\n                aspect: 1\n            }\n        };\n\n\n    }\n\n    onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n            const reader = new FileReader();\n            reader.addEventListener('load', () =>\n              this.setState({ src: reader.result })\n            );\n            reader.readAsDataURL(e.target.files[0]);\n          }\n    }\n\n    onImageLoaded = image => {\n        this.imageRef = image;\n      };\n\n      onCropComplete = crop => {\n        this.makeClientCrop(crop);\n      };\n    \n      onCropChange = (crop, percentCrop) => {\n        // You could also use percentCrop:\n        // this.setState({ crop: percentCrop });\n        this.setState({ crop });\n      };\n    \n      async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n          const croppedImageUrl = await this.getCroppedImg(\n            this.imageRef,\n            crop,\n            'newFile.jpeg'\n          );\n          this.setState({ croppedImageUrl });\n        }\n      }\n\n      getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n    \n        ctx.drawImage(\n          image,\n          crop.x * scaleX,\n          crop.y * scaleY,\n          crop.width * scaleX,\n          crop.height * scaleY,\n          0,\n          0,\n          crop.width,\n          crop.height\n        );\n    \n        return new Promise((resolve, reject) => {\n          canvas.toBlob(blob => {\n            if (!blob) {\n              //reject(new Error('Canvas is empty'));\n              console.error('Canvas is empty');\n              return;\n            }\n            blob.name = fileName;\n            window.URL.revokeObjectURL(this.fileUrl);\n            this.fileUrl = window.URL.createObjectURL(blob);\n            resolve(this.fileUrl);\n          }, 'image/jpeg');\n        });\n\n      }\n\n      render(){\n           const { crop, croppedImageUrl, src } = this.state;\n          return (\n            <div className=\"App\">\n                <div>\n                    <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\n                </div>\n                {src && (\n                         <ReactCrop\n                          src={src}\n                          crop={crop}\n                          ruleOfThirds\n                          onImageLoaded={this.onImageLoaded}\n                          onComplete={this.onCropComplete}\n                          onChange={this.onCropChange}\n                        />\n                )}\n                {croppedImageUrl && (\n                    <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n                )}\n            </div>\n          );\n      }\n}\n\nexport default Crop;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Crop from './components/Crop';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n\n      <div>\n        <Crop></Crop>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}